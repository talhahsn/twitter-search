{"ast":null,"code":"import { pctEncChar, SCHEMES } from \"../uri\";\nconst NID$ = \"(?:[0-9A-Za-z][0-9A-Za-z\\\\-]{1,31})\";\nconst PCT_ENCODED$ = \"(?:\\\\%[0-9A-Fa-f]{2})\";\nconst TRANS$$ = \"[0-9A-Za-z\\\\(\\\\)\\\\+\\\\,\\\\-\\\\.\\\\:\\\\=\\\\@\\\\;\\\\$\\\\_\\\\!\\\\*\\\\'\\\\/\\\\?\\\\#]\";\nconst NSS$ = \"(?:(?:\" + PCT_ENCODED$ + \"|\" + TRANS$$ + \")+)\";\nconst URN_SCHEME = new RegExp(\"^urn\\\\:(\" + NID$ + \")$\");\nconst URN_PATH = new RegExp(\"^(\" + NID$ + \")\\\\:(\" + NSS$ + \")$\");\nconst URN_PARSE = /^([^\\:]+)\\:(.*)/;\nconst URN_EXCLUDED = /[\\x00-\\x20\\\\\\\"\\&\\<\\>\\[\\]\\^\\`\\{\\|\\}\\~\\x7F-\\xFF]/g; //RFC 2141\n\nexport default {\n  scheme: \"urn\",\n  parse: function (components, options) {\n    const matches = components.path && components.path.match(URN_PARSE);\n\n    if (matches) {\n      const scheme = \"urn:\" + matches[1].toLowerCase();\n      let schemeHandler = SCHEMES[scheme]; //in order to serialize properly,\n      //every URN must have a serializer that calls the URN serializer\n\n      if (!schemeHandler) {\n        //create fake scheme handler\n        schemeHandler = SCHEMES[scheme] = {\n          scheme: scheme,\n          parse: function (components, options) {\n            return components;\n          },\n          serialize: SCHEMES[\"urn\"].serialize\n        };\n      }\n\n      components.scheme = scheme;\n      components.path = matches[2];\n      components = schemeHandler.parse(components, options);\n    } else {\n      components.error = components.error || \"URN can not be parsed.\";\n    }\n\n    return components;\n  },\n  serialize: function (components, options) {\n    const scheme = components.scheme || options.scheme;\n\n    if (scheme && scheme !== \"urn\") {\n      const matches = scheme.match(URN_SCHEME) || [\"urn:\" + scheme, scheme];\n      components.scheme = \"urn\";\n      components.path = matches[1] + \":\" + (components.path ? components.path.replace(URN_EXCLUDED, pctEncChar) : \"\");\n    }\n\n    return components;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}
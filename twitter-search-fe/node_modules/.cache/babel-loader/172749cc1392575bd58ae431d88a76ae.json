{"ast":null,"code":";\n\n(function () {\n  'use strict'; // Check the existence of module and module.exports to detect node\n\n  var isNode = typeof module != 'undefined' && typeof module.exports != 'undefined';\n\n  function OAuthSignature() {}\n\n  OAuthSignature.prototype.generate = function (httpMethod, url, parameters, consumerSecret, tokenSecret, options) {\n    var signatureBaseString = new SignatureBaseString(httpMethod, url, parameters).generate();\n    var encodeSignature = true;\n\n    if (options) {\n      encodeSignature = options.encodeSignature;\n    }\n\n    return new HmacSha1Signature(signatureBaseString, consumerSecret, tokenSecret).generate(encodeSignature);\n  }; // Specification: http://oauth.net/core/1.0/#anchor14\n  // url: if the scheme is missing, http will be added automatically\n\n\n  function SignatureBaseString(httpMethod, url, parameters) {\n    parameters = new ParametersLoader(parameters).get();\n    this._httpMethod = new HttpMethodElement(httpMethod).get();\n    this._url = new UrlElement(url).get();\n    this._parameters = new ParametersElement(parameters).get();\n    this._rfc3986 = new Rfc3986();\n  }\n\n  SignatureBaseString.prototype = {\n    generate: function () {\n      // HTTP_METHOD & url & parameters\n      return this._rfc3986.encode(this._httpMethod) + '&' + this._rfc3986.encode(this._url) + '&' + this._rfc3986.encode(this._parameters);\n    }\n  };\n\n  function HttpMethodElement(httpMethod) {\n    this._httpMethod = httpMethod || '';\n  }\n\n  HttpMethodElement.prototype = {\n    get: function () {\n      return this._httpMethod.toUpperCase();\n    }\n  };\n\n  function UrlElement(url) {\n    this._url = url || '';\n  }\n\n  UrlElement.prototype = {\n    get: function () {\n      // The following is to prevent js-url from loading the window.location\n      if (!this._url) {\n        return this._url;\n      } // FIXME: Make this behaviour explicit by returning warnings\n\n\n      if (this._url.indexOf('://') == -1) {\n        this._url = 'http://' + this._url;\n      } // Handle parsing the url in node or in browser\n\n\n      var parsedUrl = isNode ? this.parseInNode() : this.parseInBrowser(),\n          // FIXME: Make this behaviour explicit by returning warnings\n      scheme = (parsedUrl.scheme || 'http').toLowerCase(),\n          // FIXME: Make this behaviour explicit by returning warnings\n      authority = (parsedUrl.authority || '').toLocaleLowerCase(),\n          path = parsedUrl.path || '',\n          port = parsedUrl.port || ''; // FIXME: Make this behaviour explicit by returning warnings\n\n      if (port == 80 && scheme == 'http' || port == 443 && scheme == 'https') {\n        port = '';\n      }\n\n      var baseUrl = scheme + '://' + authority;\n      baseUrl = baseUrl + (!!port ? ':' + port : ''); // FIXME: Make this behaviour explicit by returning warnings\n\n      if (path == '/' && this._url.indexOf(baseUrl + path) === -1) {\n        path = '';\n      }\n\n      this._url = (scheme ? scheme + '://' : '') + authority + (port ? ':' + port : '') + path;\n      return this._url;\n    },\n    parseInBrowser: function () {\n      return {\n        scheme: url('protocol', this._url).toLowerCase(),\n        authority: url('hostname', this._url).toLocaleLowerCase(),\n        port: url('port', this._url),\n        path: url('path', this._url)\n      };\n    },\n    parseInNode: function () {\n      var url = require('uri-js'),\n          parsedUri = url.parse(this._url),\n          scheme = parsedUri.scheme; // strip the ':' at the end of the scheme added by the url module\n\n\n      if (scheme.charAt(scheme.length - 1) == \":\") {\n        scheme = scheme.substring(0, scheme.length - 1);\n      }\n\n      return {\n        scheme: scheme,\n        authority: parsedUri.host,\n        port: parsedUri.port,\n        path: parsedUri.path\n      };\n    }\n  };\n\n  function ParametersElement(parameters) {\n    // Parameters format: { 'key': ['value 1', 'value 2'] };\n    this._parameters = parameters || {};\n    this._sortedKeys = [];\n    this._normalizedParameters = [];\n    this._rfc3986 = new Rfc3986();\n\n    this._sortParameters();\n\n    this._concatenateParameters();\n  }\n\n  ParametersElement.prototype = {\n    _sortParameters: function () {\n      var key, encodedKey;\n\n      for (key in this._parameters) {\n        if (this._parameters.hasOwnProperty(key)) {\n          encodedKey = this._rfc3986.encode(key);\n\n          this._sortedKeys.push(encodedKey);\n        }\n      }\n\n      this._sortedKeys.sort();\n    },\n    _concatenateParameters: function () {\n      var i;\n\n      for (i = 0; i < this._sortedKeys.length; i++) {\n        this._normalizeParameter(this._sortedKeys[i]);\n      }\n    },\n    _normalizeParameter: function (encodedKey) {\n      var i,\n          key = this._rfc3986.decode(encodedKey),\n          values = this._parameters[key],\n          encodedValue;\n\n      values.sort();\n\n      for (i = 0; i < values.length; i++) {\n        encodedValue = this._rfc3986.encode(values[i]);\n\n        this._normalizedParameters.push(encodedKey + '=' + encodedValue);\n      }\n    },\n    get: function () {\n      return this._normalizedParameters.join('&');\n    }\n  };\n\n  function ParametersLoader(parameters) {\n    // Format: { 'key': ['value 1', 'value 2'] }\n    this._parameters = {};\n\n    this._loadParameters(parameters || {});\n  }\n\n  ParametersLoader.prototype = {\n    _loadParameters: function (parameters) {\n      if (parameters instanceof Array) {\n        this._loadParametersFromArray(parameters);\n      } else if (typeof parameters === 'object') {\n        this._loadParametersFromObject(parameters);\n      }\n    },\n    _loadParametersFromArray: function (parameters) {\n      var i;\n\n      for (i = 0; i < parameters.length; i++) {\n        this._loadParametersFromObject(parameters[i]);\n      }\n    },\n    _loadParametersFromObject: function (parameters) {\n      var key;\n\n      for (key in parameters) {\n        if (parameters.hasOwnProperty(key)) {\n          var stringValue = this._getStringFromParameter(parameters[key]);\n\n          this._loadParameterValue(key, stringValue);\n        }\n      }\n    },\n    _loadParameterValue: function (key, value) {\n      var i;\n\n      if (value instanceof Array) {\n        for (i = 0; i < value.length; i++) {\n          var stringValue = this._getStringFromParameter(value[i]);\n\n          this._addParameter(key, stringValue);\n        }\n\n        if (value.length == 0) {\n          this._addParameter(key, '');\n        }\n      } else {\n        this._addParameter(key, value);\n      }\n    },\n    _getStringFromParameter: function (parameter) {\n      var stringValue = parameter || '';\n\n      try {\n        if (typeof parameter === 'number' || typeof parameter === 'boolean') {\n          stringValue = parameter.toString();\n        }\n      } catch (e) {}\n\n      return stringValue;\n    },\n    _addParameter: function (key, value) {\n      if (!this._parameters[key]) {\n        this._parameters[key] = [];\n      }\n\n      this._parameters[key].push(value);\n    },\n    get: function () {\n      return this._parameters;\n    }\n  };\n\n  function Rfc3986() {}\n\n  Rfc3986.prototype = {\n    encode: function (decoded) {\n      if (!decoded) {\n        return '';\n      } // using implementation from: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FencodeURIComponent\n\n\n      return encodeURIComponent(decoded).replace(/[!'()]/g, escape).replace(/\\*/g, \"%2A\");\n    },\n    decode: function (encoded) {\n      if (!encoded) {\n        return '';\n      }\n\n      return decodeURIComponent(encoded);\n    }\n  };\n\n  function HmacSha1Signature(signatureBaseString, consumerSecret, tokenSecret) {\n    this._rfc3986 = new Rfc3986();\n    this._text = signatureBaseString;\n    this._key = this._rfc3986.encode(consumerSecret) + '&' + this._rfc3986.encode(tokenSecret);\n    this._base64EncodedHash = new HmacSha1(this._text, this._key).getBase64EncodedHash();\n  }\n\n  HmacSha1Signature.prototype = {\n    generate: function (encode) {\n      return encode === false ? this._base64EncodedHash : this._rfc3986.encode(this._base64EncodedHash);\n    }\n  };\n\n  function HmacSha1(text, key) {\n    // load CryptoJs in the browser or in node\n    this._cryptoJS = isNode ? require('crypto-js') : CryptoJS;\n    this._text = text || '';\n    this._key = key || '';\n    this._hash = this._cryptoJS.HmacSHA1(this._text, this._key);\n  }\n\n  HmacSha1.prototype = {\n    getBase64EncodedHash: function () {\n      return this._hash.toString(this._cryptoJS.enc.Base64);\n    }\n  };\n  var oauthSignature = new OAuthSignature();\n  oauthSignature.SignatureBaseString = SignatureBaseString;\n  oauthSignature.HttpMethodElement = HttpMethodElement;\n  oauthSignature.UrlElement = UrlElement;\n  oauthSignature.ParametersElement = ParametersElement;\n  oauthSignature.ParametersLoader = ParametersLoader;\n  oauthSignature.Rfc3986 = Rfc3986;\n  oauthSignature.HmacSha1Signature = HmacSha1Signature;\n  oauthSignature.HmacSha1 = HmacSha1; // support for the browser and nodejs\n\n  if (isNode) {\n    module.exports = oauthSignature;\n  } else {\n    window.oauthSignature = oauthSignature;\n  }\n})();","map":null,"metadata":{},"sourceType":"script"}